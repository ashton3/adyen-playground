/*
 * Adyen Wherever People Pay
 * This is the Adyen API Playground where you can test our API's. <br /><br />You can find out more about Adyen      at <a href=\"http://www.adyen.com\">http://www.adyen.com</a>.  <!--For this sample, you can use the api key \"special-key\" to test the authorization filters.-->
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DisableRequest;
import io.swagger.client.model.DisableResult;
import io.swagger.client.model.ModificationRequest;
import io.swagger.client.model.ModificationResult;
import io.swagger.client.model.PaymentRequest;
import io.swagger.client.model.PaymentRequest3d;
import io.swagger.client.model.PaymentResult;
import io.swagger.client.model.RecurringDetailsRequest;
import io.swagger.client.model.RecurringDetailsResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Creates a payment authorisation
     *
     * Creates a payment with a unique reference (pspReference) and attempts to obtain an authorisation hold, which can be \&quot;captured\&quot; or \&quot;cancelled\&quot; later. While for cards an authorised payment can be captured later, non-card methods typically don&#39;t support this and will automatically capture as part of the authorisation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authoriseTest() throws ApiException {
        PaymentRequest paymentRequest = null;
        PaymentResult response = api.authorise(paymentRequest);

        // TODO: test validations
    }
    
    /**
     * Completes a 3-D Secure payment authorisation
     *
     * For an authenticated 3-D secure session, creates a payment with a unique reference (pspReference) and attempts to obtain an authorisation hold, which can be \&quot;captured\&quot; or \&quot;cancelled\&quot; later.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authorise3dTest() throws ApiException {
        PaymentRequest3d paymentRequest3d = null;
        PaymentResult response = api.authorise3d(paymentRequest3d);

        // TODO: test validations
    }
    
    /**
     * Cancels a payment authorisation
     *
     * Cancels the authorisation hold on a payment, returning a unique reference for this request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelTest() throws ApiException {
        ModificationRequest modificationRequest = null;
        ModificationResult response = api.cancel(modificationRequest);

        // TODO: test validations
    }
    
    /**
     * Cancels or refunds a payment
     *
     * Performs a \&quot;cancel\&quot; on a payment if it has not yet been captured or a \&quot;refund\&quot; if it has already been captured. This is useful when it is not certain if the payment has been captured yet (e.g. when using auto-capture).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelrefundTest() throws ApiException {
        ModificationRequest modificationRequest = null;
        ModificationResult response = api.cancelrefund(modificationRequest);

        // TODO: test validations
    }
    
    /**
     * Captures a payment authorisation
     *
     * Captures the authorisation hold on a payment, returning a unique reference for this request. Usually the full authorisation amount is captured, however it&#39;s also possible to capture a smaller amount which results in cancelling the remaining authorisation balance. Payment methods which automatically capture as part of authorisation don&#39;t need to be captured, but submitting a capture request on these transactions will not result in double charges.&lt;br&gt;Please note that: &lt;br&gt;&lt;ol&gt;&lt;li&gt;if immediate or delayed auto-capture is enabled, calling the capture method is not neccessary.&lt;/ol&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captureTest() throws ApiException {
        ModificationRequest modificationRequest = null;
        ModificationResult response = api.capture(modificationRequest);

        // TODO: test validations
    }
    
    /**
     * Disable a stored payment detail
     *
     * Disable a stored payment detail
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableTest() throws ApiException {
        DisableRequest request = null;
        DisableResult response = api.disable(request);

        // TODO: test validations
    }
    
    /**
     * Retrieves stored payment details for a shopper
     *
     * Lists the stored payment details for a shopper, if available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listecurringetailsTest() throws ApiException {
        RecurringDetailsRequest request = null;
        RecurringDetailsResult response = api.listecurringetails(request);

        // TODO: test validations
    }
    
    /**
     * Refunds a payment
     *
     * Refunds a payment which has previously been captured, returning a unique reference for this request. Refunding can be done on the full captured amount or a partial amount. Multiple (partial) refunds will be accepted as long as their sum doesn&#39;t exceed the captured amount. Payments which have been authorised, but not captured cannot be refunded, use the \&quot;cancel\&quot; method instead.&lt;br&gt;Please note that: &lt;br&gt;&lt;ol&gt;&lt;li&gt; some payment methods / gateways do not support partial/multiple refunds;&lt;li&gt; a margin above the captured limit can be configured to cover shipping/handling costs.&lt;/ol&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refundTest() throws ApiException {
        ModificationRequest modificationRequest = null;
        ModificationResult response = api.refund(modificationRequest);

        // TODO: test validations
    }
    
}
